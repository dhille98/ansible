---
- name: intall application in ubuntu
  hosts: webserver
  become: yes
  tasks:
    - name: fail for unsuported os
      ansible.builtin.fail:
        msg: "This playbook is designed only for Ubuntu os"
      when: ansible_facts['distribution'] != 'Ubuntu'
    - name: Fetch a file from a URL
      ansible.builtin.get_url:
        url: " https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb "
        dest: "/home/dell/packages-microsoft-prod.deb"
    - ansible.builtin.debug:
         msg: "Microsoft key  is download using package "
    - name: Install Microsoft package
      ansible.builtin.command:
        cmd: dpkg -i packages-microsoft-prod.deb
    
    - ansible.builtin.debug:
         msg: "Microsoft key  is installed using package "
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Microsoft package
      ansible.builtin.apt:
        deb: /home/dell/packages-microsoft-prod.deb
        state: present
    - ansible.builtin.debug:
         msg: "dotnet is installed using package {{ package1}}"
    - name: Install Microsoft package-1
      ansible.builtin.apt:
        name: "{{ dotnet_packages }}"
        state: "present"
    - ansible.builtin.debug:
        msg: "dotnet is installed using package "
    - name: install in inginx webserver
      ansible.builtin.apt:
        name: "{{ ng_package }}"
        state: "present"
    - ansible.builtin.debug:
        msg: "dotnet is installed using package {{ ng_package}}"
    - name: nginx service file enabled
      ansible.builtin.service: 
        name: "{{ ng_package }}"
        enabled: yes
        state: "started"
    - ansible.builtin.debug:
        msg: "ngnix is status using package {{ ng_package }}"
    - name: Create a directory 
      ansible.builtin.file:
        path: /var/www/nopCommerce
        state: directory
        mode: '0755'
    - ansible.builtin.debug:
        msg: "crate a directry sucessfully "
    - name: nop commerce install from a URL
      ansible.builtin.get_url:
        url: "https://github.com/nopSolutions/nopCommerce/releases/download/release-4.60.6/nopCommerce_4.60.6_NoSource_linux_x64.zip"
        dest: "/var/www/nopCommerce/nopCommerce_4.60.6_NoSource_linux_x64.zip"
    - ansible.builtin.debug:
        msg: "download nopCommerce"
    - name: install in unzip install
      ansible.builtin.apt:
        name: "{{ unzip_package }}"
        state: "present"
    - ansible.builtin.debug:
        msg: "installed unzip"
    - name: Unarchive a file that is already on the remote machine
      ansible.builtin.unarchive:
        src: /var/www/nopCommerce/nopCommerce_4.60.6_NoSource_linux_x64.zip
        dest: /var/www/nopCommerce
        remote_src: yes
    - ansible.builtin.debug:
        msg: "unzip nopcommerce"
    - name: Create a directory 
      ansible.builtin.file:
        path: /var/www/nopCommerce/logs
        state: directory
        mode: '0755'
    - ansible.builtin.debug:
        msg: "create a directory logs"
    - name: Create a directory 
      ansible.builtin.file:
        path: /var/www/nopCommerce/bin
        state: directory
        mode: '0755' 
    - ansible.builtin.debug:
        msg: "create a directory bin"
    - name: change permission of directory
      ansible.builtin.file: 
         path: /var/www/nopCommerce
         owner: www-data
         group: www-data
         mode: '0755'
    - ansible.builtin.debug:
        msg: "change the  permission a directory "
    - name: create tomcat application accounts
      ansible.builtin.copy:
        src: files/nopCommerce.service
        dest: "/etc/systemd/system/nopCommerce.service"
        owner: root
        group: root
        mode: '0644'
    - ansible.builtin.debug:
        msg: "copy to nopCommerce.service in remote"
    - name: nopCommerce.service file enabled
      ansible.builtin.service: 
        name: nopCommerce.service
        enabled: yes
        state: "started"
    - ansible.builtin.debug:
        msg: "service is started nopCommerce.service "
    - name: nginx service file enabled
      ansible.builtin.service: 
        name: "{{ ng_package }}"
        enabled: yes
        state: "restarted"
    - ansible.builtin.debug:
        msg: "apllication is restarted {{ ng_package }}"